shiny::runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(data.table)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
theme = "shiny.css",
titlePanel("World Happiness Report"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year", choices = c("2015" = 15, "2016" = 16, "2017" = 17)),
selectInput("region",
("Select Region"),
choices = c("All",
"Western Europe",
"Central and Eastern Europe",
"Eastern Asia",
"Latin America and Caribbean",
"Middle East and Northern Africa",
"North America",
"Southeastern Asia",
"Southern Asia",
"Sub-Saharan Africa",
"Australia and New Zealand")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Overview", plotOutput("heatPlot"), includeMarkdown("Analysis/overview.md")),
tabPanel("GDP Scatterplot", plotlyOutput("gdpPlot"), includeMarkdown("Analysis/sanjay.md")),
tabPanel("Trust Scatterplot", plotOutput("freePlot"), includeMarkdown("Analysis/torin.md")),
tabPanel("Generosity Bar Chart", plotOutput("genPlot"), includeMarkdown("Analysis/gabe.md")),
tabPanel("Conclusion",  DT::dataTableOutput("conclusion"))
)
)
)
)
shinyUI(ui)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(data.table)
library(DT)
server <- function(input, output) {
selectedData <- reactive({
dataPath <- paste0("Data/WH", input$year, ".csv")
data <- read.csv(dataPath)
if (input$region != "All") {
data <- filter(data, Region == input$region)
}
return(data)
})
output$heatPlot <- renderPlot({
editedData <-selectedData() %>%
mutate(Country = sub("United States", "USA",  Country)) %>%
mutate(Country = sub("United Kingdom", "UK", Country))
map.world <- map_data('world')
mapped <- left_join(map.world, editedData, by = c('region' = 'Country'))
ggplot(data = mapped, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Happiness.Score)) +
labs(title = "Happiness Score by Nation", x = "Longitude", y = "Latitude", fill = "Happiness Score") +
coord_fixed()
})
output$gdpPlot <- renderPlotly({
plot_ly(data = selectedData(),
x=~Economy..GDP.per.Capita. / Happiness.Score * 100, y=~Health..Life.Expectancy. / Happiness.Score * 100, color=~Region, type = "scatter",
text = ~paste("Country:", Country)) %>%
layout(title = "GDP and Life Expectancy per region as percentages of Overall Happiness",
xaxis = list(title = "GDP per Capita (%)"),
yaxis = list(title = "Health / Life Expectancy (%)"))
})
output$freePlot <- renderPlot({
ggplot(data = selectedData()) +
geom_smooth(aes(x = Freedom, y = Happiness.Score)) +
geom_point(aes(x = Freedom, y = Happiness.Score, color = Trust..Government.Corruption.)) +
scale_color_gradient(low = "blue", high = "yellow") +
labs(
title = "Correlations: Happiness, Freedom, and Government Trust",
x = "Freedom",
y = "Happiness Score",
color = "Trust in Gov."
)
})
output$genPlot <- renderPlot({
ggplot(data = selectedData()) +
geom_bar(aes(x = reorder(Country, Happiness.Score), fill = Generosity, weight = Happiness.Score)) +
scale_fill_gradient(low = "green", high = "red") +
coord_flip() +
labs(title = "Happiness Score Boxplot",
x = "Country",
y = "Happiness Score")
})
output$conclusion = DT::renderDataTable({
data <- selectedData() %>%
select(Country, Happiness.Rank, Happiness.Score, Region) %>%
rename("Happiness Rank" = Happiness.Rank) %>%
rename("Happiness Score" = Happiness.Score)
DT::datatable(data, options = list(lengthMenu = c(5, 10, 15)))
})
}
shinyServer(server)
ui <- fluidPage(
theme = "shiny.css",
titlePanel("World Happiness Report"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year", choices = c("2015" = 15, "2016" = 16, "2017" = 17)),
selectInput("region",
("Select Region"),
choices = c("All",
"Western Europe",
"Central and Eastern Europe",
"Eastern Asia",
"Latin America and Caribbean",
"Middle East and Northern Africa",
"North America",
"Southeastern Asia",
"Southern Asia",
"Sub-Saharan Africa",
"Australia and New Zealand")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Overview", plotOutput("heatPlot"), includeMarkdown("Analysis/overview.md")),
tabPanel("GDP Scatterplot", plotlyOutput("gdpPlot"), includeMarkdown("Analysis/sanjay.md")),
tabPanel("Trust Scatterplot", plotOutput("freePlot"), includeMarkdown("Analysis/torin.md")),
tabPanel("Generosity Bar Chart", plotOutput("genPlot"), includeMarkdown("Analysis/gabe.md")),
tabPanel("Conclusion",  DT::dataTableOutput("conclusion"))
)
)
)
)
shinyUI(ui)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
